-- ====================================================================
-- Database Schema and Seed Data for Library Management System (Oracle 11g)
-- ====================================================================

-- ==========================
-- 1. SEQUENCE DEFINITIONS
-- ==========================
CREATE SEQUENCE LIB_USER_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE BOOK_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE BORROW_SEQ    START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE EQUIP_SEQ     START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE REQ_SEQ       START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE ROOM_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SLOT_SEQ      START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE BOOKING_SEQ   START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE NOTIF_SEQ     START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- ==========================
-- 2. TABLE DEFINITIONS
-- ==========================

CREATE TABLE LIB_USER (
  USER_ID        NUMBER        PRIMARY KEY,
  USERNAME       VARCHAR2(50)  UNIQUE NOT NULL,
  PASSWORD_HASH  VARCHAR2(64)  NOT NULL,
  ROLE           VARCHAR2(20)  DEFAULT 'STUDENT' NOT NULL,
  STUDENT_ID     VARCHAR2(10),
  CREATED_AT     DATE          DEFAULT SYSDATE NOT NULL
);

CREATE TABLE STUDENTS (
  STUDENT_ID    VARCHAR2(10) PRIMARY KEY,
  FIRST_NAME    VARCHAR2(50) NOT NULL,
  LAST_NAME     VARCHAR2(50) NOT NULL,
  EMAIL         VARCHAR2(100) NOT NULL,
  PHONE         VARCHAR2(20),
  STATUS        VARCHAR2(20),
  YEAR_LEVEL    NUMBER(1),
  BRANCH        VARCHAR2(50)
);

CREATE TABLE BOOKS (
  BOOK_ID           NUMBER        PRIMARY KEY,
  TITLE             VARCHAR2(200) NOT NULL,
  AUTHOR            VARCHAR2(200),
  PUBLICATION_YEAR  NUMBER(4),
  GENRE             VARCHAR2(50),
  PUBLISHER         VARCHAR2(100),
  ISBN              VARCHAR2(20),
  EDITION           VARCHAR2(20),
  LANGUAGE          VARCHAR2(20),
  MATERIAL_TYPE     VARCHAR2(20),
  PAGES             NUMBER,
  DESCRIPTION       CLOB,
  TOTAL_COPIES      NUMBER,
  AVAILABLE_COPIES  NUMBER,
  LOCATION          VARCHAR2(100),
  SHELF_LOCATION    VARCHAR2(50),
  KEYWORDS          VARCHAR2(200),
  COVER_IMAGE_URL   VARCHAR2(200),
  BORROWING_PERIOD  NUMBER,
  LATE_FEE          VARCHAR2(20),
  IS_RESERVED       CHAR(1)       CHECK (IS_RESERVED IN ('Y','N')),
  FILE_FORMAT       VARCHAR2(50),
  DOWNLOAD_LIMIT    NUMBER,
  TYPE              VARCHAR2(20)  CHECK (TYPE IN ('PHYSICAL','EBOOK'))
);

CREATE TABLE BORROWED_BOOKS (
  BORROW_ID    NUMBER       PRIMARY KEY,
  BOOK_ID      NUMBER       REFERENCES BOOKS(BOOK_ID),
  USER_ID      NUMBER       REFERENCES LIB_USER(USER_ID),
  BORROW_DATE  DATE         DEFAULT SYSDATE,
  DUE_DATE     DATE,
  RETURN_DATE  DATE,
  LATE_FEE_ACC  NUMBER,
  RENEWS_LEFT  NUMBER,
  DAYS_LEFT    NUMBER
);

CREATE TABLE EQUIPMENT (
  EQUIP_ID       NUMBER       PRIMARY KEY,
  TYPE            VARCHAR2(50) NOT NULL,
  MODEL           VARCHAR2(100),
  STATUS          VARCHAR2(20) DEFAULT 'AVAILABLE',
  BORROWED_UNTIL  DATE
);

CREATE TABLE EQUIPMENT_REQUESTS (
  REQUEST_ID    NUMBER       PRIMARY KEY,
  USER_ID       NUMBER       REFERENCES LIB_USER(USER_ID),
  EQUIP_ID      NUMBER       REFERENCES EQUIPMENT(EQUIP_ID),
  REQUEST_DATE  DATE         DEFAULT SYSDATE,
  STATUS        VARCHAR2(20) DEFAULT 'PENDING',
  PURPOSE       VARCHAR2(200),
  DURATION      NUMBER
);

CREATE TABLE MEETING_ROOMS (
  ROOM_ID     NUMBER       PRIMARY KEY,
  NAME         VARCHAR2(50),
  CAPACITY     NUMBER
);

CREATE TABLE TIME_SLOTS (
  SLOT_ID    NUMBER       PRIMARY KEY,
  SLOT_TIME  VARCHAR2(50) NOT NULL
);

CREATE TABLE ROOM_BOOKINGS (
  BOOKING_ID      NUMBER       PRIMARY KEY,
  USER_ID         NUMBER       REFERENCES LIB_USER(USER_ID),
  ROOM_ID         NUMBER       REFERENCES MEETING_ROOMS(ROOM_ID),
  BOOKING_DATE    DATE         NOT NULL,
  SLOT_ID         NUMBER       REFERENCES TIME_SLOTS(SLOT_ID),
  PURPOSE         VARCHAR2(200),
  ATTENDEES_COUNT NUMBER,
  ADDITIONAL_NOTES CLOB,
  STATUS          VARCHAR2(20) DEFAULT 'PENDING'
);

-- Add mapping table for booking attendees
CREATE TABLE ROOM_BOOKING_ATTENDEES (
  BOOKING_ID     NUMBER         NOT NULL,
  STUDENT_ID     VARCHAR2(10)   NOT NULL,
  PRIMARY KEY (BOOKING_ID, STUDENT_ID),
  FOREIGN KEY (BOOKING_ID) REFERENCES ROOM_BOOKINGS(BOOKING_ID)
);

CREATE INDEX IDX_ROOM_BOOKING_STUDENT ON ROOM_BOOKING_ATTENDEES(STUDENT_ID);

CREATE TABLE NOTIFICATIONS (
  NOTIF_ID    NUMBER       PRIMARY KEY,
  USER_ID     NUMBER       REFERENCES LIB_USER(USER_ID),
  TYPE        VARCHAR2(20),
  TITLE       VARCHAR2(200),
  MESSAGE     CLOB,
  STATUS      VARCHAR2(20),
  NOTIF_DATE  DATE         DEFAULT SYSDATE,
  IS_READ     CHAR(1)      DEFAULT 'N' CHECK (IS_READ IN ('Y','N'))
);

-- =====================================
-- 3. TRIGGERS FOR AUTO-PRIMARY KEY
-- =====================================

CREATE OR REPLACE TRIGGER LIB_USER_BI_TRG
BEFORE INSERT ON LIB_USER
FOR EACH ROW
WHEN (NEW.USER_ID IS NULL)
BEGIN
  SELECT LIB_USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER BOOKS_BI_TRG
BEFORE INSERT ON BOOKS
FOR EACH ROW
WHEN (NEW.BOOK_ID IS NULL)
BEGIN
  SELECT BOOK_SEQ.NEXTVAL INTO :NEW.BOOK_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER BORROWED_BOOKS_BI_TRG
BEFORE INSERT ON BORROWED_BOOKS
FOR EACH ROW
WHEN (NEW.BORROW_ID IS NULL)
BEGIN
  SELECT BORROW_SEQ.NEXTVAL INTO :NEW.BORROW_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER EQUIPMENT_BI_TRG
BEFORE INSERT ON EQUIPMENT
FOR EACH ROW
WHEN (NEW.EQUIP_ID IS NULL)
BEGIN
  SELECT EQUIP_SEQ.NEXTVAL INTO :NEW.EQUIP_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER EQUIP_REQ_BI_TRG
BEFORE INSERT ON EQUIPMENT_REQUESTS
FOR EACH ROW
WHEN (NEW.REQUEST_ID IS NULL)
BEGIN
  SELECT REQ_SEQ.NEXTVAL INTO :NEW.REQUEST_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER MEETING_ROOMS_BI_TRG
BEFORE INSERT ON MEETING_ROOMS
FOR EACH ROW
WHEN (NEW.ROOM_ID IS NULL)
BEGIN
  SELECT ROOM_SEQ.NEXTVAL INTO :NEW.ROOM_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TIME_SLOTS_BI_TRG
BEFORE INSERT ON TIME_SLOTS
FOR EACH ROW
WHEN (NEW.SLOT_ID IS NULL)
BEGIN
  SELECT SLOT_SEQ.NEXTVAL INTO :NEW.SLOT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ROOM_BOOKINGS_BI_TRG
BEFORE INSERT ON ROOM_BOOKINGS
FOR EACH ROW
WHEN (NEW.BOOKING_ID IS NULL)
BEGIN
  SELECT BOOKING_SEQ.NEXTVAL INTO :NEW.BOOKING_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER NOTIFICATIONS_BI_TRG
BEFORE INSERT ON NOTIFICATIONS
FOR EACH ROW
WHEN (NEW.NOTIF_ID IS NULL)
BEGIN
  SELECT NOTIF_SEQ.NEXTVAL INTO :NEW.NOTIF_ID FROM DUAL;
END;
/

-- =====================================================
-- 4. TRIGGERS FOR BUSINESS LOGIC (COUNTS & STATUS)
-- =====================================================

-- Decrement available copies on borrow
CREATE OR REPLACE TRIGGER TRG_AFTER_BORROW_INSERT
AFTER INSERT ON BORROWED_BOOKS
FOR EACH ROW
BEGIN
  UPDATE BOOKS
    SET AVAILABLE_COPIES = AVAILABLE_COPIES - 1
  WHERE BOOK_ID = :NEW.BOOK_ID;
END;
/

-- Increment available copies on return (when RETURN_DATE set)
CREATE OR REPLACE TRIGGER TRG_AFTER_RETURN_UPDATE
AFTER UPDATE OF RETURN_DATE ON BORROWED_BOOKS
FOR EACH ROW
WHEN (NEW.RETURN_DATE IS NOT NULL AND OLD.RETURN_DATE IS NULL)
BEGIN
  UPDATE BOOKS
    SET AVAILABLE_COPIES = AVAILABLE_COPIES + 1
  WHERE BOOK_ID = :NEW.BOOK_ID;
END;
/

-- Update equipment status when approved or returned
CREATE OR REPLACE TRIGGER TRG_AFTER_EQUIP_REQ_UPDATE
AFTER UPDATE OF STATUS ON EQUIPMENT_REQUESTS
FOR EACH ROW
BEGIN
  IF :NEW.STATUS = 'APPROVED' THEN
    UPDATE EQUIPMENT
      SET STATUS = 'BORROWED', BORROWED_UNTIL = SYSDATE + :NEW.DURATION
    WHERE EQUIP_ID = :NEW.EQUIP_ID;
  ELSIF :NEW.STATUS IN ('RETURNED','CANCELLED') THEN
    UPDATE EQUIPMENT
      SET STATUS = 'AVAILABLE', BORROWED_UNTIL = NULL
    WHERE EQUIP_ID = :NEW.EQUIP_ID;
  END IF;
END;
/

-- =====================================================
-- 5. PL/SQL PROCEDURES
-- =====================================================

-- 5.1 Create User with pre-hashed password
CREATE OR REPLACE PROCEDURE CREATE_USER (
  P_USERNAME      IN VARCHAR2,
  P_PASSWORD_HASH IN VARCHAR2,
  P_ROLE          IN VARCHAR2 DEFAULT 'STUDENT',
  P_STUDENT_ID    IN VARCHAR2
) AS
BEGIN
  INSERT INTO LIB_USER (USERNAME, PASSWORD_HASH, ROLE, STUDENT_ID)
    VALUES (P_USERNAME, P_PASSWORD_HASH, P_ROLE, P_STUDENT_ID);
  COMMIT;
END CREATE_USER;
/

-- 5.2 Borrow Book
CREATE OR REPLACE PROCEDURE BORROW_BOOK(
  P_USER_ID IN NUMBER,
  P_BOOK_ID IN NUMBER
) AS
  V_PERIOD NUMBER;
  V_DUE    DATE;
BEGIN
  SELECT BORROWING_PERIOD INTO V_PERIOD
    FROM BOOKS WHERE BOOK_ID = P_BOOK_ID;
  V_DUE := SYSDATE + V_PERIOD;
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE)
    VALUES(P_BOOK_ID,P_USER_ID,SYSDATE,V_DUE);
  COMMIT;
END;
/

-- 5.3 Return Book
CREATE OR REPLACE PROCEDURE RETURN_BOOK(
  P_BORROW_ID IN NUMBER
) AS
  V_BOOK_ID NUMBER;
BEGIN
  UPDATE BORROWED_BOOKS
    SET RETURN_DATE = SYSDATE
  WHERE BORROW_ID = P_BORROW_ID;
  COMMIT;
END;
/

-- 5.4 Request Equipment
CREATE OR REPLACE PROCEDURE REQUEST_EQUIPMENT(
  P_USER_ID   IN NUMBER,
  P_EQUIP_ID  IN NUMBER,
  P_PURPOSE   IN VARCHAR2,
  P_DURATION  IN NUMBER
) AS
BEGIN
  INSERT INTO EQUIPMENT_REQUESTS(USER_ID,EQUIP_ID,PURPOSE,DURATION)
    VALUES(P_USER_ID,P_EQUIP_ID,P_PURPOSE,P_DURATION);
  COMMIT;
END;
/

-- 5.5 Cancel Equipment Request
CREATE OR REPLACE PROCEDURE CANCEL_EQUIP_REQUEST(
  P_REQUEST_ID IN NUMBER
) AS
BEGIN
  UPDATE EQUIPMENT_REQUESTS
    SET STATUS = 'CANCELLED'
  WHERE REQUEST_ID = P_REQUEST_ID;
  COMMIT;
END;
/

-- 5.6 Reserve Room
CREATE OR REPLACE PROCEDURE RESERVE_ROOM(
  P_USER_ID       IN NUMBER,
  P_ROOM_ID       IN NUMBER,
  P_BOOK_DATE     IN DATE,
  P_SLOT_ID       IN NUMBER,
  P_PURPOSE       IN VARCHAR2,
  P_ATTENDEES_CNT IN NUMBER
) AS
BEGIN
  INSERT INTO ROOM_BOOKINGS(USER_ID,ROOM_ID,BOOKING_DATE,SLOT_ID,PURPOSE,ATTENDEES_COUNT)
    VALUES(P_USER_ID,P_ROOM_ID,P_BOOK_DATE,P_SLOT_ID,P_PURPOSE,P_ATTENDEES_CNT);
  COMMIT;
END;
/

-- 5.7 Cancel Room Reservation
CREATE OR REPLACE PROCEDURE CANCEL_ROOM_BOOKING(
  P_BOOKING_ID IN NUMBER
) AS
BEGIN
  UPDATE ROOM_BOOKINGS
    SET STATUS = 'CANCELLED'
  WHERE BOOKING_ID = P_BOOKING_ID;
  COMMIT;
END;
/

-- 5.8 Add Notification
CREATE OR REPLACE PROCEDURE ADD_NOTIFICATION(
  P_USER_ID   IN NUMBER,
  P_TYPE      IN VARCHAR2,
  P_TITLE     IN VARCHAR2,
  P_MESSAGE   IN CLOB,
  P_STATUS    IN VARCHAR2 DEFAULT 'INFO'
) AS
BEGIN
  INSERT INTO NOTIFICATIONS(USER_ID,TYPE,TITLE,MESSAGE,STATUS)
    VALUES(P_USER_ID,P_TYPE,P_TITLE,P_MESSAGE,P_STATUS);
  COMMIT;
END;
/

-- ==========================
-- 6. SEED DATA
-- ==========================

-- 6.1 STUDENTS
INSERT INTO STUDENTS(STUDENT_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE,STATUS,YEAR_LEVEL,BRANCH)
VALUES('23-1234','Plato','Aristotle','plato.aristotle@campus.edu','(555) 123-4567','ENROLLED',3,'SAN BARTOLOME');

-- 6.2 MEETING ROOMS
INSERT INTO MEETING_ROOMS(NAME,CAPACITY) VALUES('Room 101',10);
INSERT INTO MEETING_ROOMS(NAME,CAPACITY) VALUES('Room 102',10);
INSERT INTO MEETING_ROOMS(NAME,CAPACITY) VALUES('Room 103',10);
INSERT INTO MEETING_ROOMS(NAME,CAPACITY) VALUES('Room 104',10);

-- 6.3 TIME SLOTS
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('8:00 AM - 9:00 AM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('9:00 AM - 10:00 AM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('10:00 AM - 11:00 AM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('11:00 AM - 12:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('12:00 PM - 1:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('1:00 PM - 2:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('2:00 PM - 3:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('3:00 PM - 4:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('4:00 PM - 5:00 PM');
INSERT INTO TIME_SLOTS(SLOT_TIME) VALUES('5:00 PM - 6:00 PM');

-- 6.4 EQUIPMENT
INSERT INTO EQUIPMENT(TYPE,MODEL,STATUS) VALUES('Laptop','Dell XPS 13','AVAILABLE');
INSERT INTO EQUIPMENT(TYPE,MODEL,STATUS,BORROWED_UNTIL) VALUES('Laptop','MacBook Pro','BORROWED',TO_DATE('2023-06-15','YYYY-MM-DD'));
INSERT INTO EQUIPMENT(TYPE,MODEL,STATUS) VALUES('Tablet','iPad Pro','AVAILABLE');
INSERT INTO EQUIPMENT(TYPE,MODEL,STATUS) VALUES('Tablet','Samsung Galaxy Tab','AVAILABLE');

-- 6.5 SEED USER, BOOKS, BORROWS, REQUESTS, BOOKINGS & NOTIFICATIONS
DECLARE
  V_USER_ID    NUMBER;
  V_EQUIP_ID   NUMBER;
  V_ROOM_ID    NUMBER;
  V_SLOT_ID    NUMBER;
BEGIN
  -- create user with literal password
  CREATE_USER('plato.aristotle', 'qwen123', 'STUDENT', '23-1234');
  SELECT LIB_USER_SEQ.CURRVAL INTO V_USER_ID FROM DUAL;

  -- Seed BOOKS and BORROWED_BOOKS
  -- Introduction to Algorithms
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,TYPE)
    VALUES('Introduction to Algorithms','Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein',2009,'Computer Science','MIT Press','978-0262033848','3rd Edition','English','Textbook',1312,'A comprehensive introduction...',5,2,'Main Library','CS-101-A','algorithms,data structures,computer science,programming','https://example.com/book-covers/intro-algorithms.jpg',30,'25.00','N','PHYSICAL');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-05-15','YYYY-MM-DD'),TO_DATE('2023-06-15','YYYY-MM-DD'),NULL,0,2,5);

  -- Design Patterns
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,TYPE)
    VALUES('Design Patterns','Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides',1994,'Software Engineering','Addison-Wesley','978-0201633610','1st Edition','English','Reference',416,'Catalog of solutions...',3,1,'Computer Science Building','SE-202-B','design patterns,software engineering,object-oriented,programming','https://example.com/book-covers/design-patterns.jpg',21,'20.00','Y','PHYSICAL');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-05-20','YYYY-MM-DD'),TO_DATE('2023-06-20','YYYY-MM-DD'),NULL,0,1,10);

  -- Clean Code
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,TYPE)
    VALUES('Clean Code','Robert C. Martin',2008,'Software Engineering','Prentice Hall','978-0132350884','1st Edition','English','Textbook',464,'Guide to cleaning code...',4,0,'Engineering Library','SE-105-C','clean code,software engineering,practices,refactoring','https://example.com/book-covers/clean-code.jpg',14,'25.00','N','PHYSICAL');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-04-10','YYYY-MM-DD'),TO_DATE('2023-05-10','YYYY-MM-DD'),NULL,125.00,0,-5);

  -- Database Systems
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,TYPE)
    VALUES('Database Systems','Hector Garcia-Molina, Jeffrey D. Ullman, Jennifer Widom',2008,'Computer Science','Pearson','978-0131873254','2nd Edition','English','Textbook',1142,'Theory and practice...',3,2,'Science Library','CS-305-D','database,SQL,data management,information systems','https://example.com/book-covers/database-systems.jpg',30,'20.00','N','PHYSICAL');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-04-01','YYYY-MM-DD'),TO_DATE('2023-05-01','YYYY-MM-DD'),TO_DATE('2023-04-28','YYYY-MM-DD'),0,0,0);

  -- Python Programming for Beginners (EBOOK)
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,FILE_FORMAT,DOWNLOAD_LIMIT,TYPE)
    VALUES('Python Programming for Beginners','John Smith',2020,'Programming','Tech Publishing','978-1234567890','2nd Edition','English','Tutorial',350,'Guide to Python basics...',NULL,NULL,'Digital Library','E-PROG-101','python,programming,beginners,coding,tutorial','https://example.com/book-covers/python-beginners.jpg',21,'0.00','N','PDF, EPUB',3,'EBOOK');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-05-30','YYYY-MM-DD'),TO_DATE('2023-06-30','YYYY-MM-DD'),NULL,0,2,15);

  -- Web Development with JavaScript (EBOOK)
  INSERT INTO BOOKS(TITLE,AUTHOR,PUBLICATION_YEAR,GENRE,PUBLISHER,ISBN,EDITION,LANGUAGE,MATERIAL_TYPE,PAGES,DESCRIPTION,TOTAL_COPIES,AVAILABLE_COPIES,LOCATION,SHELF_LOCATION,KEYWORDS,COVER_IMAGE_URL,BORROWING_PERIOD,LATE_FEE,IS_RESERVED,FILE_FORMAT,DOWNLOAD_LIMIT,TYPE)
    VALUES('Web Development with JavaScript','Sarah Johnson',2021,'Web Development','Frontend Books','978-0987654321','1st Edition','English','Reference',422,'Modern JS techniques...',NULL,NULL,'Digital Library','E-WEB-202','javascript,web development,frontend,programming,react,vue','https://example.com/book-covers/js-web-dev.jpg',21,'0.00','N','PDF, EPUB, MOBI',2,'EBOOK');
  INSERT INTO BORROWED_BOOKS(BOOK_ID,USER_ID,BORROW_DATE,DUE_DATE,RETURN_DATE,LATE_FEE_ACC,RENEWS_LEFT,DAYS_LEFT)
    VALUES(BOOK_SEQ.CURRVAL,V_USER_ID,TO_DATE('2023-05-25','YYYY-MM-DD'),TO_DATE('2023-06-25','YYYY-MM-DD'),NULL,0,1,12);

  -- Equipment Request
  SELECT EQUIP_ID INTO V_EQUIP_ID FROM EQUIPMENT WHERE MODEL='Dell XPS 13';
  INSERT INTO EQUIPMENT_REQUESTS(USER_ID,EQUIP_ID,PURPOSE,DURATION,STATUS)
    VALUES(V_USER_ID, V_EQUIP_ID, 'CLASSWORK', 3, 'PENDING');

  -- Room Booking
  SELECT ROOM_ID INTO V_ROOM_ID FROM MEETING_ROOMS WHERE NAME='Room 101';
  SELECT SLOT_ID INTO V_SLOT_ID FROM TIME_SLOTS WHERE SLOT_TIME='9:00 AM - 10:00 AM';
  INSERT INTO ROOM_BOOKINGS(USER_ID,ROOM_ID,BOOKING_DATE,SLOT_ID,PURPOSE,ATTENDEES_COUNT)
    VALUES(V_USER_ID, V_ROOM_ID, TO_DATE('2023-06-10','YYYY-MM-DD'), V_SLOT_ID, 'GROUP_STUDY', 5);

  -- Notifications
  INSERT INTO NOTIFICATIONS(USER_ID,TYPE,TITLE,MESSAGE,STATUS,IS_READ)
    VALUES(V_USER_ID,'MEETING_ROOM','Meeting Room Confirmation','Your reservation for Room 101 on June 15 at 10:00 AM is confirmed.','APPROVED','N');
  INSERT INTO NOTIFICATIONS(USER_ID,TYPE,TITLE,MESSAGE,STATUS,IS_READ)
    VALUES(V_USER_ID,'EQUIPMENT','Equipment Request Pending','Your request to borrow Laptop is pending approval.','PENDING','N');
  INSERT INTO NOTIFICATIONS(USER_ID,TYPE,TITLE,MESSAGE,STATUS,IS_READ)
    VALUES(V_USER_ID,'BOOK','Overdue Book Return','Your book "Clean Code" is overdue.','OVERDUE','N');
  INSERT INTO NOTIFICATIONS(USER_ID,TYPE,TITLE,MESSAGE,STATUS,IS_READ)
    VALUES(V_USER_ID,'EQUIPMENT','Equipment Request Approved','Your request to borrow 3D Printer has been approved.','APPROVED','Y');

  COMMIT;
END;
/ 